# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAccountMembersMemberResult',
    'GetTeamsTeamResult',
    'GetWorkPoolsWorkPoolResult',
    'GetWorkerMetadataBaseJobConfigsResult',
]

@pulumi.output_type
class GetAccountMembersMemberResult(dict):
    def __init__(__self__, *,
                 account_role_id: str,
                 account_role_name: str,
                 actor_id: str,
                 email: str,
                 first_name: str,
                 handle: str,
                 id: str,
                 last_name: str,
                 user_id: str):
        """
        :param str account_role_id: Acount Role ID (UUID)
        :param str account_role_name: Name of Account Role assigned to member
        :param str actor_id: Actor ID (UUID)
        :param str email: Member email
        :param str first_name: Member's first name
        :param str handle: Member handle, or a human-readable identifier
        :param str id: Account Member ID (UUID)
        :param str last_name: Member's last name
        :param str user_id: User ID (UUID)
        """
        pulumi.set(__self__, "account_role_id", account_role_id)
        pulumi.set(__self__, "account_role_name", account_role_name)
        pulumi.set(__self__, "actor_id", actor_id)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "handle", handle)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accountRoleId")
    def account_role_id(self) -> str:
        """
        Acount Role ID (UUID)
        """
        return pulumi.get(self, "account_role_id")

    @property
    @pulumi.getter(name="accountRoleName")
    def account_role_name(self) -> str:
        """
        Name of Account Role assigned to member
        """
        return pulumi.get(self, "account_role_name")

    @property
    @pulumi.getter(name="actorId")
    def actor_id(self) -> str:
        """
        Actor ID (UUID)
        """
        return pulumi.get(self, "actor_id")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Member email
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        Member's first name
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def handle(self) -> str:
        """
        Member handle, or a human-readable identifier
        """
        return pulumi.get(self, "handle")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Account Member ID (UUID)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        """
        Member's last name
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User ID (UUID)
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetTeamsTeamResult(dict):
    def __init__(__self__, *,
                 created: str,
                 description: str,
                 id: str,
                 name: str,
                 updated: str):
        """
        :param str created: Date and time of the team creation in RFC 3339 format
        :param str description: Description of team
        :param str id: Team ID (UUID)
        :param str name: Name of Team
        :param str updated: Date and time that the team was last updated in RFC 3339 format
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        Date and time of the team creation in RFC 3339 format
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of team
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Team ID (UUID)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Team
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        Date and time that the team was last updated in RFC 3339 format
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetWorkPoolsWorkPoolResult(dict):
    def __init__(__self__, *,
                 base_job_template: str,
                 concurrency_limit: int,
                 created: str,
                 default_queue_id: str,
                 description: str,
                 id: str,
                 name: str,
                 paused: bool,
                 type: str,
                 updated: str):
        """
        :param str base_job_template: The base job template for the work pool, as a JSON string
        :param int concurrency_limit: The concurrency limit applied to this work pool
        :param str created: Date and time of the work pool creation in RFC 3339 format
        :param str default_queue_id: The ID (UUID) of the default queue associated with this work pool
        :param str description: Description of the work pool
        :param str id: Work pool ID (UUID)
        :param str name: Name of the work pool
        :param bool paused: Whether this work pool is paused
        :param str type: Type of the work pool
        :param str updated: Date and time that the work pool was last updated in RFC 3339 format
        """
        pulumi.set(__self__, "base_job_template", base_job_template)
        pulumi.set(__self__, "concurrency_limit", concurrency_limit)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "default_queue_id", default_queue_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "paused", paused)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter(name="baseJobTemplate")
    def base_job_template(self) -> str:
        """
        The base job template for the work pool, as a JSON string
        """
        return pulumi.get(self, "base_job_template")

    @property
    @pulumi.getter(name="concurrencyLimit")
    def concurrency_limit(self) -> int:
        """
        The concurrency limit applied to this work pool
        """
        return pulumi.get(self, "concurrency_limit")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        Date and time of the work pool creation in RFC 3339 format
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="defaultQueueId")
    def default_queue_id(self) -> str:
        """
        The ID (UUID) of the default queue associated with this work pool
        """
        return pulumi.get(self, "default_queue_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the work pool
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Work pool ID (UUID)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the work pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def paused(self) -> bool:
        """
        Whether this work pool is paused
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the work pool
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        Date and time that the work pool was last updated in RFC 3339 format
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetWorkerMetadataBaseJobConfigsResult(dict):
    def __init__(__self__, *,
                 azure_container_instances: str,
                 azure_container_instances_push: str,
                 cloud_run: str,
                 cloud_run_push: str,
                 docker: str,
                 ecs: str,
                 ecs_push: str,
                 kubernetes: str,
                 prefect_agent: str,
                 process: str,
                 vertex_ai: str):
        """
        :param str azure_container_instances: Default base job configuration for Azure Container Instances workers
        :param str azure_container_instances_push: Default base job configuration for Azure Container Instances Push workers
        :param str cloud_run: Default base job configuration for Cloud Run workers
        :param str cloud_run_push: Default base job configuration for Cloud Run Push workers
        :param str docker: Default base job configuration for Docker workers
        :param str ecs: Default base job configuration for ECS workers
        :param str ecs_push: Default base job configuration for ECS Push workers
        :param str kubernetes: Default base job configuration for Kubernetes workers
        :param str prefect_agent: Default base job configuration for Prefect Agent workers
        :param str process: Default base job configuration for Process workers
        :param str vertex_ai: Default base job configuration for Vertex AI workers
        """
        pulumi.set(__self__, "azure_container_instances", azure_container_instances)
        pulumi.set(__self__, "azure_container_instances_push", azure_container_instances_push)
        pulumi.set(__self__, "cloud_run", cloud_run)
        pulumi.set(__self__, "cloud_run_push", cloud_run_push)
        pulumi.set(__self__, "docker", docker)
        pulumi.set(__self__, "ecs", ecs)
        pulumi.set(__self__, "ecs_push", ecs_push)
        pulumi.set(__self__, "kubernetes", kubernetes)
        pulumi.set(__self__, "prefect_agent", prefect_agent)
        pulumi.set(__self__, "process", process)
        pulumi.set(__self__, "vertex_ai", vertex_ai)

    @property
    @pulumi.getter(name="azureContainerInstances")
    def azure_container_instances(self) -> str:
        """
        Default base job configuration for Azure Container Instances workers
        """
        return pulumi.get(self, "azure_container_instances")

    @property
    @pulumi.getter(name="azureContainerInstancesPush")
    def azure_container_instances_push(self) -> str:
        """
        Default base job configuration for Azure Container Instances Push workers
        """
        return pulumi.get(self, "azure_container_instances_push")

    @property
    @pulumi.getter(name="cloudRun")
    def cloud_run(self) -> str:
        """
        Default base job configuration for Cloud Run workers
        """
        return pulumi.get(self, "cloud_run")

    @property
    @pulumi.getter(name="cloudRunPush")
    def cloud_run_push(self) -> str:
        """
        Default base job configuration for Cloud Run Push workers
        """
        return pulumi.get(self, "cloud_run_push")

    @property
    @pulumi.getter
    def docker(self) -> str:
        """
        Default base job configuration for Docker workers
        """
        return pulumi.get(self, "docker")

    @property
    @pulumi.getter
    def ecs(self) -> str:
        """
        Default base job configuration for ECS workers
        """
        return pulumi.get(self, "ecs")

    @property
    @pulumi.getter(name="ecsPush")
    def ecs_push(self) -> str:
        """
        Default base job configuration for ECS Push workers
        """
        return pulumi.get(self, "ecs_push")

    @property
    @pulumi.getter
    def kubernetes(self) -> str:
        """
        Default base job configuration for Kubernetes workers
        """
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter(name="prefectAgent")
    def prefect_agent(self) -> str:
        """
        Default base job configuration for Prefect Agent workers
        """
        return pulumi.get(self, "prefect_agent")

    @property
    @pulumi.getter
    def process(self) -> str:
        """
        Default base job configuration for Process workers
        """
        return pulumi.get(self, "process")

    @property
    @pulumi.getter(name="vertexAi")
    def vertex_ai(self) -> str:
        """
        Default base job configuration for Vertex AI workers
        """
        return pulumi.get(self, "vertex_ai")


