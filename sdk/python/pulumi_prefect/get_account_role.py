# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAccountRoleResult',
    'AwaitableGetAccountRoleResult',
    'get_account_role',
    'get_account_role_output',
]

@pulumi.output_type
class GetAccountRoleResult:
    """
    A collection of values returned by getAccountRole.
    """
    def __init__(__self__, account_id=None, created=None, id=None, is_system_role=None, name=None, permissions=None, updated=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_system_role and not isinstance(is_system_role, bool):
            raise TypeError("Expected argument 'is_system_role' to be a bool")
        pulumi.set(__self__, "is_system_role", is_system_role)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        Account ID (UUID) where the resource resides
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Account Role ID (UUID)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSystemRole")
    def is_system_role(self) -> bool:
        """
        Boolean specifying if the Account Role is a system role
        """
        return pulumi.get(self, "is_system_role")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Account Role
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[str]:
        """
        List of permissions linked to the Account Role
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")


class AwaitableGetAccountRoleResult(GetAccountRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountRoleResult(
            account_id=self.account_id,
            created=self.created,
            id=self.id,
            is_system_role=self.is_system_role,
            name=self.name,
            permissions=self.permissions,
            updated=self.updated)


def get_account_role(account_id: Optional[str] = None,
                     name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountRoleResult:
    """
    Get information about an existing Workspace Role.
    <br>
    Use this data source read down the pre-defined Roles, to manage User and Service Account access.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prefect as prefect

    owner = prefect.get_account_role(name="Admin")
    member = prefect.get_account_role(name="Member")
    ```


    :param str account_id: Account ID (UUID) where the resource resides
    :param str name: Name of the Account Role
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prefect:index/getAccountRole:getAccountRole', __args__, opts=opts, typ=GetAccountRoleResult).value

    return AwaitableGetAccountRoleResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        created=pulumi.get(__ret__, 'created'),
        id=pulumi.get(__ret__, 'id'),
        is_system_role=pulumi.get(__ret__, 'is_system_role'),
        name=pulumi.get(__ret__, 'name'),
        permissions=pulumi.get(__ret__, 'permissions'),
        updated=pulumi.get(__ret__, 'updated'))


@_utilities.lift_output_func(get_account_role)
def get_account_role_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                            name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountRoleResult]:
    """
    Get information about an existing Workspace Role.
    <br>
    Use this data source read down the pre-defined Roles, to manage User and Service Account access.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prefect as prefect

    owner = prefect.get_account_role(name="Admin")
    member = prefect.get_account_role(name="Member")
    ```


    :param str account_id: Account ID (UUID) where the resource resides
    :param str name: Name of the Account Role
    """
    ...
