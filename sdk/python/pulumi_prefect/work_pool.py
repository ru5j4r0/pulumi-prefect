# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkPoolArgs', 'WorkPool']

@pulumi.input_type
class WorkPoolArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 base_job_template: Optional[pulumi.Input[str]] = None,
                 concurrency_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkPool resource.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] base_job_template: The base job template for the work pool, as a JSON string
        :param pulumi.Input[int] concurrency_limit: The concurrency limit applied to this work pool
        :param pulumi.Input[str] description: Description of the work pool
        :param pulumi.Input[str] name: Name of the work pool
        :param pulumi.Input[bool] paused: Whether this work pool is paused
        :param pulumi.Input[str] type: Type of the work pool, eg. kubernetes, ecs, process, etc.
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID), defaults to the workspace set in the provider
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if base_job_template is not None:
            pulumi.set(__self__, "base_job_template", base_job_template)
        if concurrency_limit is not None:
            pulumi.set(__self__, "concurrency_limit", concurrency_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="baseJobTemplate")
    def base_job_template(self) -> Optional[pulumi.Input[str]]:
        """
        The base job template for the work pool, as a JSON string
        """
        return pulumi.get(self, "base_job_template")

    @base_job_template.setter
    def base_job_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_job_template", value)

    @property
    @pulumi.getter(name="concurrencyLimit")
    def concurrency_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The concurrency limit applied to this work pool
        """
        return pulumi.get(self, "concurrency_limit")

    @concurrency_limit.setter
    def concurrency_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrency_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the work pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the work pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this work pool is paused
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the work pool, eg. kubernetes, ecs, process, etc.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace ID (UUID), defaults to the workspace set in the provider
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _WorkPoolState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 base_job_template: Optional[pulumi.Input[str]] = None,
                 concurrency_limit: Optional[pulumi.Input[int]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 default_queue_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkPool resources.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] base_job_template: The base job template for the work pool, as a JSON string
        :param pulumi.Input[int] concurrency_limit: The concurrency limit applied to this work pool
        :param pulumi.Input[str] created: Timestamp of when the resource was created (RFC3339)
        :param pulumi.Input[str] default_queue_id: The ID (UUID) of the default queue associated with this work pool
        :param pulumi.Input[str] description: Description of the work pool
        :param pulumi.Input[str] name: Name of the work pool
        :param pulumi.Input[bool] paused: Whether this work pool is paused
        :param pulumi.Input[str] type: Type of the work pool, eg. kubernetes, ecs, process, etc.
        :param pulumi.Input[str] updated: Timestamp of when the resource was updated (RFC3339)
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID), defaults to the workspace set in the provider
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if base_job_template is not None:
            pulumi.set(__self__, "base_job_template", base_job_template)
        if concurrency_limit is not None:
            pulumi.set(__self__, "concurrency_limit", concurrency_limit)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if default_queue_id is not None:
            pulumi.set(__self__, "default_queue_id", default_queue_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="baseJobTemplate")
    def base_job_template(self) -> Optional[pulumi.Input[str]]:
        """
        The base job template for the work pool, as a JSON string
        """
        return pulumi.get(self, "base_job_template")

    @base_job_template.setter
    def base_job_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_job_template", value)

    @property
    @pulumi.getter(name="concurrencyLimit")
    def concurrency_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The concurrency limit applied to this work pool
        """
        return pulumi.get(self, "concurrency_limit")

    @concurrency_limit.setter
    def concurrency_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrency_limit", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="defaultQueueId")
    def default_queue_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID (UUID) of the default queue associated with this work pool
        """
        return pulumi.get(self, "default_queue_id")

    @default_queue_id.setter
    def default_queue_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_queue_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the work pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the work pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this work pool is paused
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the work pool, eg. kubernetes, ecs, process, etc.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace ID (UUID), defaults to the workspace set in the provider
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class WorkPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 base_job_template: Optional[pulumi.Input[str]] = None,
                 concurrency_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The resource `work_pool` represents a Prefect Cloud Work Pool. Work Pools represent infrastructure configurations for jobs across several common environments.

        Work Pools can be set up with default base job configurations, based on which type. Use this in conjunction with the `get_worker_metadata` data source to bootstrap new Work Pools quickly.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect

        example_work_pool = prefect.WorkPool("exampleWorkPool",
            type="kubernetes",
            paused=False,
            workspace_id="my-workspace-id")
        # Use a JSON file to load a base job configuration
        example_index_work_pool_work_pool = prefect.WorkPool("exampleIndex/workPoolWorkPool",
            type="kubernetes",
            workspace_id=data["prefect_workspace"]["prd"]["id"],
            paused=False,
            base_job_template=(lambda path: open(path).read())("./base-job-template.json"))
        worker_metadata = prefect.get_worker_metadata()
        example_prefect_index_work_pool_work_pool = prefect.WorkPool("examplePrefectIndex/workPoolWorkPool",
            type="kubernetes",
            workspace_id=data["prefect_workspace"]["prd"]["id"],
            paused=False,
            base_job_template=worker_metadata.base_job_configs.kubernetes)
        ```

        ## Import

        Prefect Work Pools can be imported using the format `workspace_id,name`

        ```sh
        $ pulumi import prefect:index/workPool:WorkPool example 00000000-0000-0000-0000-000000000000,kubernetes-work-pool
        ```

        You can also import by name only if you have a workspace_id set in your provider

        ```sh
        $ pulumi import prefect:index/workPool:WorkPool example kubernetes-work-pool
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] base_job_template: The base job template for the work pool, as a JSON string
        :param pulumi.Input[int] concurrency_limit: The concurrency limit applied to this work pool
        :param pulumi.Input[str] description: Description of the work pool
        :param pulumi.Input[str] name: Name of the work pool
        :param pulumi.Input[bool] paused: Whether this work pool is paused
        :param pulumi.Input[str] type: Type of the work pool, eg. kubernetes, ecs, process, etc.
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID), defaults to the workspace set in the provider
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkPoolArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The resource `work_pool` represents a Prefect Cloud Work Pool. Work Pools represent infrastructure configurations for jobs across several common environments.

        Work Pools can be set up with default base job configurations, based on which type. Use this in conjunction with the `get_worker_metadata` data source to bootstrap new Work Pools quickly.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect

        example_work_pool = prefect.WorkPool("exampleWorkPool",
            type="kubernetes",
            paused=False,
            workspace_id="my-workspace-id")
        # Use a JSON file to load a base job configuration
        example_index_work_pool_work_pool = prefect.WorkPool("exampleIndex/workPoolWorkPool",
            type="kubernetes",
            workspace_id=data["prefect_workspace"]["prd"]["id"],
            paused=False,
            base_job_template=(lambda path: open(path).read())("./base-job-template.json"))
        worker_metadata = prefect.get_worker_metadata()
        example_prefect_index_work_pool_work_pool = prefect.WorkPool("examplePrefectIndex/workPoolWorkPool",
            type="kubernetes",
            workspace_id=data["prefect_workspace"]["prd"]["id"],
            paused=False,
            base_job_template=worker_metadata.base_job_configs.kubernetes)
        ```

        ## Import

        Prefect Work Pools can be imported using the format `workspace_id,name`

        ```sh
        $ pulumi import prefect:index/workPool:WorkPool example 00000000-0000-0000-0000-000000000000,kubernetes-work-pool
        ```

        You can also import by name only if you have a workspace_id set in your provider

        ```sh
        $ pulumi import prefect:index/workPool:WorkPool example kubernetes-work-pool
        ```

        :param str resource_name: The name of the resource.
        :param WorkPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 base_job_template: Optional[pulumi.Input[str]] = None,
                 concurrency_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkPoolArgs.__new__(WorkPoolArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["base_job_template"] = base_job_template
            __props__.__dict__["concurrency_limit"] = concurrency_limit
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["paused"] = paused
            __props__.__dict__["type"] = type
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created"] = None
            __props__.__dict__["default_queue_id"] = None
            __props__.__dict__["updated"] = None
        super(WorkPool, __self__).__init__(
            'prefect:index/workPool:WorkPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            base_job_template: Optional[pulumi.Input[str]] = None,
            concurrency_limit: Optional[pulumi.Input[int]] = None,
            created: Optional[pulumi.Input[str]] = None,
            default_queue_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            paused: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'WorkPool':
        """
        Get an existing WorkPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] base_job_template: The base job template for the work pool, as a JSON string
        :param pulumi.Input[int] concurrency_limit: The concurrency limit applied to this work pool
        :param pulumi.Input[str] created: Timestamp of when the resource was created (RFC3339)
        :param pulumi.Input[str] default_queue_id: The ID (UUID) of the default queue associated with this work pool
        :param pulumi.Input[str] description: Description of the work pool
        :param pulumi.Input[str] name: Name of the work pool
        :param pulumi.Input[bool] paused: Whether this work pool is paused
        :param pulumi.Input[str] type: Type of the work pool, eg. kubernetes, ecs, process, etc.
        :param pulumi.Input[str] updated: Timestamp of when the resource was updated (RFC3339)
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID), defaults to the workspace set in the provider
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkPoolState.__new__(_WorkPoolState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["base_job_template"] = base_job_template
        __props__.__dict__["concurrency_limit"] = concurrency_limit
        __props__.__dict__["created"] = created
        __props__.__dict__["default_queue_id"] = default_queue_id
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["paused"] = paused
        __props__.__dict__["type"] = type
        __props__.__dict__["updated"] = updated
        __props__.__dict__["workspace_id"] = workspace_id
        return WorkPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[Optional[str]]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="baseJobTemplate")
    def base_job_template(self) -> pulumi.Output[str]:
        """
        The base job template for the work pool, as a JSON string
        """
        return pulumi.get(self, "base_job_template")

    @property
    @pulumi.getter(name="concurrencyLimit")
    def concurrency_limit(self) -> pulumi.Output[Optional[int]]:
        """
        The concurrency limit applied to this work pool
        """
        return pulumi.get(self, "concurrency_limit")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="defaultQueueId")
    def default_queue_id(self) -> pulumi.Output[str]:
        """
        The ID (UUID) of the default queue associated with this work pool
        """
        return pulumi.get(self, "default_queue_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the work pool
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the work pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def paused(self) -> pulumi.Output[bool]:
        """
        Whether this work pool is paused
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the work pool, eg. kubernetes, ecs, process, etc.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> pulumi.Output[str]:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[Optional[str]]:
        """
        Workspace ID (UUID), defaults to the workspace set in the provider
        """
        return pulumi.get(self, "workspace_id")

