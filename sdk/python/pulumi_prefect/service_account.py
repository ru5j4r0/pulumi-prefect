# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ServiceAccountArgs', 'ServiceAccount']

@pulumi.input_type
class ServiceAccountArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 account_role_name: Optional[pulumi.Input[str]] = None,
                 api_key_expiration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceAccount resource.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] account_role_name: Account Role name of the service account
        :param pulumi.Input[str] api_key_expiration: Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        :param pulumi.Input[str] name: Name of the service account
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_role_name is not None:
            pulumi.set(__self__, "account_role_name", account_role_name)
        if api_key_expiration is not None:
            pulumi.set(__self__, "api_key_expiration", api_key_expiration)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="accountRoleName")
    def account_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Account Role name of the service account
        """
        return pulumi.get(self, "account_role_name")

    @account_role_name.setter
    def account_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_role_name", value)

    @property
    @pulumi.getter(name="apiKeyExpiration")
    def api_key_expiration(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        """
        return pulumi.get(self, "api_key_expiration")

    @api_key_expiration.setter
    def api_key_expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_expiration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service account
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ServiceAccountState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 account_role_name: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 api_key_created: Optional[pulumi.Input[str]] = None,
                 api_key_expiration: Optional[pulumi.Input[str]] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 api_key_name: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceAccount resources.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] account_role_name: Account Role name of the service account
        :param pulumi.Input[str] api_key: API Key associated with the service account
        :param pulumi.Input[str] api_key_created: Timestamp of the API Key creation (RFC3339)
        :param pulumi.Input[str] api_key_expiration: Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        :param pulumi.Input[str] api_key_id: API Key ID associated with the service account
        :param pulumi.Input[str] api_key_name: API Key Name associated with the service account
        :param pulumi.Input[str] created: Timestamp of when the resource was created (RFC3339)
        :param pulumi.Input[str] name: Name of the service account
        :param pulumi.Input[str] updated: Timestamp of when the resource was updated (RFC3339)
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_role_name is not None:
            pulumi.set(__self__, "account_role_name", account_role_name)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_key_created is not None:
            pulumi.set(__self__, "api_key_created", api_key_created)
        if api_key_expiration is not None:
            pulumi.set(__self__, "api_key_expiration", api_key_expiration)
        if api_key_id is not None:
            pulumi.set(__self__, "api_key_id", api_key_id)
        if api_key_name is not None:
            pulumi.set(__self__, "api_key_name", api_key_name)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="accountRoleName")
    def account_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Account Role name of the service account
        """
        return pulumi.get(self, "account_role_name")

    @account_role_name.setter
    def account_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_role_name", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        API Key associated with the service account
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiKeyCreated")
    def api_key_created(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the API Key creation (RFC3339)
        """
        return pulumi.get(self, "api_key_created")

    @api_key_created.setter
    def api_key_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_created", value)

    @property
    @pulumi.getter(name="apiKeyExpiration")
    def api_key_expiration(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        """
        return pulumi.get(self, "api_key_expiration")

    @api_key_expiration.setter
    def api_key_expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_expiration", value)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        API Key ID associated with the service account
        """
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="apiKeyName")
    def api_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        API Key Name associated with the service account
        """
        return pulumi.get(self, "api_key_name")

    @api_key_name.setter
    def api_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_name", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the service account
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated", value)


class ServiceAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 account_role_name: Optional[pulumi.Input[str]] = None,
                 api_key_expiration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The resource `service_account` represents a Prefect Cloud Service Account. A Service Account allows you to create an API Key that is not associated with a user account.

        Service Accounts are used to configure API access for workers or programs. Use this resource to provision and rotate Keys as well as assign Account and Workspace Access through Roles.

        API Keys for `service_account` resources can be rotated by modifying the `api_key_expiration` attribute.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect
        import pulumiverse_time as time

        # NON-EXPIRING API KEY
        example_service_account = prefect.ServiceAccount("exampleServiceAccount")
        ninety_days = time.Rotating("ninetyDays", rotation_days=90)
        # Pass the time_rotating resource to the `api_key_expiration` attribute
        # in order to automate the rotation of the Service Account key
        example_index_service_account_service_account = prefect.ServiceAccount("exampleIndex/serviceAccountServiceAccount", api_key_expiration=ninety_days.rotation_rfc3339)
        ```

        ## Import

        Prefect Service Accounts can be imported via name in the form `name/my-bot-name`

        ```sh
        $ pulumi import prefect:index/serviceAccount:ServiceAccount example name/my-bot-name
        ```

        Prefect Service Accounts can also be imported via UUID

        ```sh
        $ pulumi import prefect:index/serviceAccount:ServiceAccount example 00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] account_role_name: Account Role name of the service account
        :param pulumi.Input[str] api_key_expiration: Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        :param pulumi.Input[str] name: Name of the service account
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceAccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The resource `service_account` represents a Prefect Cloud Service Account. A Service Account allows you to create an API Key that is not associated with a user account.

        Service Accounts are used to configure API access for workers or programs. Use this resource to provision and rotate Keys as well as assign Account and Workspace Access through Roles.

        API Keys for `service_account` resources can be rotated by modifying the `api_key_expiration` attribute.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect
        import pulumiverse_time as time

        # NON-EXPIRING API KEY
        example_service_account = prefect.ServiceAccount("exampleServiceAccount")
        ninety_days = time.Rotating("ninetyDays", rotation_days=90)
        # Pass the time_rotating resource to the `api_key_expiration` attribute
        # in order to automate the rotation of the Service Account key
        example_index_service_account_service_account = prefect.ServiceAccount("exampleIndex/serviceAccountServiceAccount", api_key_expiration=ninety_days.rotation_rfc3339)
        ```

        ## Import

        Prefect Service Accounts can be imported via name in the form `name/my-bot-name`

        ```sh
        $ pulumi import prefect:index/serviceAccount:ServiceAccount example name/my-bot-name
        ```

        Prefect Service Accounts can also be imported via UUID

        ```sh
        $ pulumi import prefect:index/serviceAccount:ServiceAccount example 00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param ServiceAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 account_role_name: Optional[pulumi.Input[str]] = None,
                 api_key_expiration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAccountArgs.__new__(ServiceAccountArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["account_role_name"] = account_role_name
            __props__.__dict__["api_key_expiration"] = api_key_expiration
            __props__.__dict__["name"] = name
            __props__.__dict__["api_key"] = None
            __props__.__dict__["api_key_created"] = None
            __props__.__dict__["api_key_id"] = None
            __props__.__dict__["api_key_name"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["updated"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ServiceAccount, __self__).__init__(
            'prefect:index/serviceAccount:ServiceAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            account_role_name: Optional[pulumi.Input[str]] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            api_key_created: Optional[pulumi.Input[str]] = None,
            api_key_expiration: Optional[pulumi.Input[str]] = None,
            api_key_id: Optional[pulumi.Input[str]] = None,
            api_key_name: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            updated: Optional[pulumi.Input[str]] = None) -> 'ServiceAccount':
        """
        Get an existing ServiceAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] account_role_name: Account Role name of the service account
        :param pulumi.Input[str] api_key: API Key associated with the service account
        :param pulumi.Input[str] api_key_created: Timestamp of the API Key creation (RFC3339)
        :param pulumi.Input[str] api_key_expiration: Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        :param pulumi.Input[str] api_key_id: API Key ID associated with the service account
        :param pulumi.Input[str] api_key_name: API Key Name associated with the service account
        :param pulumi.Input[str] created: Timestamp of when the resource was created (RFC3339)
        :param pulumi.Input[str] name: Name of the service account
        :param pulumi.Input[str] updated: Timestamp of when the resource was updated (RFC3339)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceAccountState.__new__(_ServiceAccountState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["account_role_name"] = account_role_name
        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["api_key_created"] = api_key_created
        __props__.__dict__["api_key_expiration"] = api_key_expiration
        __props__.__dict__["api_key_id"] = api_key_id
        __props__.__dict__["api_key_name"] = api_key_name
        __props__.__dict__["created"] = created
        __props__.__dict__["name"] = name
        __props__.__dict__["updated"] = updated
        return ServiceAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="accountRoleName")
    def account_role_name(self) -> pulumi.Output[str]:
        """
        Account Role name of the service account
        """
        return pulumi.get(self, "account_role_name")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        API Key associated with the service account
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiKeyCreated")
    def api_key_created(self) -> pulumi.Output[str]:
        """
        Timestamp of the API Key creation (RFC3339)
        """
        return pulumi.get(self, "api_key_created")

    @property
    @pulumi.getter(name="apiKeyExpiration")
    def api_key_expiration(self) -> pulumi.Output[Optional[str]]:
        """
        Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        """
        return pulumi.get(self, "api_key_expiration")

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Output[str]:
        """
        API Key ID associated with the service account
        """
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeyName")
    def api_key_name(self) -> pulumi.Output[str]:
        """
        API Key Name associated with the service account
        """
        return pulumi.get(self, "api_key_name")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the service account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def updated(self) -> pulumi.Output[str]:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")

