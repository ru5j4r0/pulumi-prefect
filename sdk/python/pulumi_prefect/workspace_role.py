# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkspaceRoleArgs', 'WorkspaceRole']

@pulumi.input_type
class WorkspaceRoleArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 inherited_role_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a WorkspaceRole resource.
        :param pulumi.Input[str] description: Description of the Workspace Role
        :param pulumi.Input[str] inherited_role_id: Workspace Role ID (UUID), whose permissions are inherited by this Workspace Role
        :param pulumi.Input[str] name: Name of the Workspace Role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: List of scopes linked to the Workspace Role
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if inherited_role_id is not None:
            pulumi.set(__self__, "inherited_role_id", inherited_role_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Workspace Role
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inheritedRoleId")
    def inherited_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace Role ID (UUID), whose permissions are inherited by this Workspace Role
        """
        return pulumi.get(self, "inherited_role_id")

    @inherited_role_id.setter
    def inherited_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inherited_role_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Workspace Role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of scopes linked to the Workspace Role
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class _WorkspaceRoleState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 inherited_role_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkspaceRole resources.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] created: Timestamp of when the resource was created (RFC3339)
        :param pulumi.Input[str] description: Description of the Workspace Role
        :param pulumi.Input[str] inherited_role_id: Workspace Role ID (UUID), whose permissions are inherited by this Workspace Role
        :param pulumi.Input[str] name: Name of the Workspace Role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: List of scopes linked to the Workspace Role
        :param pulumi.Input[str] updated: Timestamp of when the resource was updated (RFC3339)
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if inherited_role_id is not None:
            pulumi.set(__self__, "inherited_role_id", inherited_role_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Workspace Role
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inheritedRoleId")
    def inherited_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace Role ID (UUID), whose permissions are inherited by this Workspace Role
        """
        return pulumi.get(self, "inherited_role_id")

    @inherited_role_id.setter
    def inherited_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inherited_role_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Workspace Role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of scopes linked to the Workspace Role
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated", value)


class WorkspaceRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 inherited_role_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The resource `workspace_role` represents a Prefect Cloud Workspace Role. Workspace Roles hold a set of permissions to a specific Workspace, and can be attached to an accessor (User or Service Account) to grant access to the Workspace.

        To obtain a list of available scopes, please refer to the `GET /api/workspace_scopes` [API](https://app.prefect.cloud/api/docs#tag/Workspace-Scopes/operation/get_workspace_scopes_api_workspace_scopes_get)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect

        example = prefect.WorkspaceRole("example", scopes=[
            "manage_blocks",
            "see_flows",
        ])
        ```

        ## Import

        Prefect Workspace Roles can be imported using the workspace role's UUID

        ```sh
        $ pulumi import prefect:index/workspaceRole:WorkspaceRole example 00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the Workspace Role
        :param pulumi.Input[str] inherited_role_id: Workspace Role ID (UUID), whose permissions are inherited by this Workspace Role
        :param pulumi.Input[str] name: Name of the Workspace Role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: List of scopes linked to the Workspace Role
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkspaceRoleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The resource `workspace_role` represents a Prefect Cloud Workspace Role. Workspace Roles hold a set of permissions to a specific Workspace, and can be attached to an accessor (User or Service Account) to grant access to the Workspace.

        To obtain a list of available scopes, please refer to the `GET /api/workspace_scopes` [API](https://app.prefect.cloud/api/docs#tag/Workspace-Scopes/operation/get_workspace_scopes_api_workspace_scopes_get)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect

        example = prefect.WorkspaceRole("example", scopes=[
            "manage_blocks",
            "see_flows",
        ])
        ```

        ## Import

        Prefect Workspace Roles can be imported using the workspace role's UUID

        ```sh
        $ pulumi import prefect:index/workspaceRole:WorkspaceRole example 00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param WorkspaceRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 inherited_role_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceRoleArgs.__new__(WorkspaceRoleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["inherited_role_id"] = inherited_role_id
            __props__.__dict__["name"] = name
            __props__.__dict__["scopes"] = scopes
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["updated"] = None
        super(WorkspaceRole, __self__).__init__(
            'prefect:index/workspaceRole:WorkspaceRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            inherited_role_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            updated: Optional[pulumi.Input[str]] = None) -> 'WorkspaceRole':
        """
        Get an existing WorkspaceRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Account ID (UUID), defaults to the account set in the provider
        :param pulumi.Input[str] created: Timestamp of when the resource was created (RFC3339)
        :param pulumi.Input[str] description: Description of the Workspace Role
        :param pulumi.Input[str] inherited_role_id: Workspace Role ID (UUID), whose permissions are inherited by this Workspace Role
        :param pulumi.Input[str] name: Name of the Workspace Role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: List of scopes linked to the Workspace Role
        :param pulumi.Input[str] updated: Timestamp of when the resource was updated (RFC3339)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkspaceRoleState.__new__(_WorkspaceRoleState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created"] = created
        __props__.__dict__["description"] = description
        __props__.__dict__["inherited_role_id"] = inherited_role_id
        __props__.__dict__["name"] = name
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["updated"] = updated
        return WorkspaceRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the Workspace Role
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inheritedRoleId")
    def inherited_role_id(self) -> pulumi.Output[Optional[str]]:
        """
        Workspace Role ID (UUID), whose permissions are inherited by this Workspace Role
        """
        return pulumi.get(self, "inherited_role_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Workspace Role
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of scopes linked to the Workspace Role
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def updated(self) -> pulumi.Output[str]:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")

