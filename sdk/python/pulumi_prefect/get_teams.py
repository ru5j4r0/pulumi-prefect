# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetTeamsResult',
    'AwaitableGetTeamsResult',
    'get_teams',
    'get_teams_output',
]

@pulumi.output_type
class GetTeamsResult:
    """
    A collection of values returned by getTeams.
    """
    def __init__(__self__, account_id=None, id=None, teams=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if teams and not isinstance(teams, list):
            raise TypeError("Expected argument 'teams' to be a list")
        pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def teams(self) -> Sequence['outputs.GetTeamsTeamResult']:
        """
        Teams returned by the server
        """
        return pulumi.get(self, "teams")


class AwaitableGetTeamsResult(GetTeamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamsResult(
            account_id=self.account_id,
            id=self.id,
            teams=self.teams)


def get_teams(account_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamsResult:
    """
    Get information about multiple Teams.
    <br>
    Use this data source to search for multiple Teams. Defaults to fetching all Teams in the Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prefect as prefect

    all_teams = prefect.get_teams()
    ```


    :param str account_id: Account ID (UUID), defaults to the account set in the provider
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prefect:index/getTeams:getTeams', __args__, opts=opts, typ=GetTeamsResult).value

    return AwaitableGetTeamsResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        id=pulumi.get(__ret__, 'id'),
        teams=pulumi.get(__ret__, 'teams'))


@_utilities.lift_output_func(get_teams)
def get_teams_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamsResult]:
    """
    Get information about multiple Teams.
    <br>
    Use this data source to search for multiple Teams. Defaults to fetching all Teams in the Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prefect as prefect

    all_teams = prefect.get_teams()
    ```


    :param str account_id: Account ID (UUID), defaults to the account set in the provider
    """
    ...
