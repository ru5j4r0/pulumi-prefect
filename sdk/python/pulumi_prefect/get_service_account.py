# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetServiceAccountResult',
    'AwaitableGetServiceAccountResult',
    'get_service_account',
    'get_service_account_output',
]

@pulumi.output_type
class GetServiceAccountResult:
    """
    A collection of values returned by getServiceAccount.
    """
    def __init__(__self__, account_id=None, account_role_name=None, api_key=None, api_key_created=None, api_key_expiration=None, api_key_id=None, api_key_name=None, created=None, id=None, name=None, updated=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if account_role_name and not isinstance(account_role_name, str):
            raise TypeError("Expected argument 'account_role_name' to be a str")
        pulumi.set(__self__, "account_role_name", account_role_name)
        if api_key and not isinstance(api_key, str):
            raise TypeError("Expected argument 'api_key' to be a str")
        pulumi.set(__self__, "api_key", api_key)
        if api_key_created and not isinstance(api_key_created, str):
            raise TypeError("Expected argument 'api_key_created' to be a str")
        pulumi.set(__self__, "api_key_created", api_key_created)
        if api_key_expiration and not isinstance(api_key_expiration, str):
            raise TypeError("Expected argument 'api_key_expiration' to be a str")
        pulumi.set(__self__, "api_key_expiration", api_key_expiration)
        if api_key_id and not isinstance(api_key_id, str):
            raise TypeError("Expected argument 'api_key_id' to be a str")
        pulumi.set(__self__, "api_key_id", api_key_id)
        if api_key_name and not isinstance(api_key_name, str):
            raise TypeError("Expected argument 'api_key_name' to be a str")
        pulumi.set(__self__, "api_key_name", api_key_name)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        Account ID (UUID), defaults to the account set in the provider
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="accountRoleName")
    def account_role_name(self) -> str:
        """
        Account Role name of the service account
        """
        return pulumi.get(self, "account_role_name")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API Key associated with the service account
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiKeyCreated")
    def api_key_created(self) -> str:
        """
        Date and time that the API Key was created in RFC 3339 format
        """
        return pulumi.get(self, "api_key_created")

    @property
    @pulumi.getter(name="apiKeyExpiration")
    def api_key_expiration(self) -> str:
        """
        Date and time that the API Key expires in RFC 3339 format
        """
        return pulumi.get(self, "api_key_expiration")

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        """
        API Key ID associated with the service account. NOTE: this is always null for reads. If you need the API Key ID, use the `ServiceAccount` resource instead.
        """
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="apiKeyName")
    def api_key_name(self) -> str:
        """
        API Key Name associated with the service account
        """
        return pulumi.get(self, "api_key_name")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        Timestamp of when the resource was created (RFC3339)
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Service Account ID (UUID)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the service account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        Timestamp of when the resource was updated (RFC3339)
        """
        return pulumi.get(self, "updated")


class AwaitableGetServiceAccountResult(GetServiceAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceAccountResult(
            account_id=self.account_id,
            account_role_name=self.account_role_name,
            api_key=self.api_key,
            api_key_created=self.api_key_created,
            api_key_expiration=self.api_key_expiration,
            api_key_id=self.api_key_id,
            api_key_name=self.api_key_name,
            created=self.created,
            id=self.id,
            name=self.name,
            updated=self.updated)


def get_service_account(account_id: Optional[str] = None,
                        id: Optional[str] = None,
                        name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceAccountResult:
    """
    Get information about an existing Service Account, by name or ID.
    <br>
    Use this data source to obtain service account-level attributes, such as ID.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prefect as prefect

    bot = prefect.get_service_account(name="my-bot-name")
    ```


    :param str account_id: Account ID (UUID), defaults to the account set in the provider
    :param str id: Service Account ID (UUID)
    :param str name: Name of the service account
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prefect:index/getServiceAccount:getServiceAccount', __args__, opts=opts, typ=GetServiceAccountResult).value

    return AwaitableGetServiceAccountResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        account_role_name=pulumi.get(__ret__, 'account_role_name'),
        api_key=pulumi.get(__ret__, 'api_key'),
        api_key_created=pulumi.get(__ret__, 'api_key_created'),
        api_key_expiration=pulumi.get(__ret__, 'api_key_expiration'),
        api_key_id=pulumi.get(__ret__, 'api_key_id'),
        api_key_name=pulumi.get(__ret__, 'api_key_name'),
        created=pulumi.get(__ret__, 'created'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        updated=pulumi.get(__ret__, 'updated'))


@_utilities.lift_output_func(get_service_account)
def get_service_account_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                               id: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceAccountResult]:
    """
    Get information about an existing Service Account, by name or ID.
    <br>
    Use this data source to obtain service account-level attributes, such as ID.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prefect as prefect

    bot = prefect.get_service_account(name="my-bot-name")
    ```


    :param str account_id: Account ID (UUID), defaults to the account set in the provider
    :param str id: Service Account ID (UUID)
    :param str name: Name of the service account
    """
    ...
