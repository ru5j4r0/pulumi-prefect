# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkspaceAccessArgs', 'WorkspaceAccess']

@pulumi.input_type
class WorkspaceAccessArgs:
    def __init__(__self__, *,
                 accessor_id: pulumi.Input[str],
                 accessor_type: pulumi.Input[str],
                 workspace_role_id: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkspaceAccess resource.
        :param pulumi.Input[str] accessor_id: ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        :param pulumi.Input[str] accessor_type: USER | SERVICE_ACCOUNT | TEAM
        :param pulumi.Input[str] workspace_role_id: Workspace Role ID (UUID) to grant to accessor
        :param pulumi.Input[str] account_id: Account ID (UUID) where the workspace is located
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID) to grant access to
        """
        pulumi.set(__self__, "accessor_id", accessor_id)
        pulumi.set(__self__, "accessor_type", accessor_type)
        pulumi.set(__self__, "workspace_role_id", workspace_role_id)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="accessorId")
    def accessor_id(self) -> pulumi.Input[str]:
        """
        ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        """
        return pulumi.get(self, "accessor_id")

    @accessor_id.setter
    def accessor_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "accessor_id", value)

    @property
    @pulumi.getter(name="accessorType")
    def accessor_type(self) -> pulumi.Input[str]:
        """
        USER | SERVICE_ACCOUNT | TEAM
        """
        return pulumi.get(self, "accessor_type")

    @accessor_type.setter
    def accessor_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "accessor_type", value)

    @property
    @pulumi.getter(name="workspaceRoleId")
    def workspace_role_id(self) -> pulumi.Input[str]:
        """
        Workspace Role ID (UUID) to grant to accessor
        """
        return pulumi.get(self, "workspace_role_id")

    @workspace_role_id.setter
    def workspace_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_role_id", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID (UUID) where the workspace is located
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace ID (UUID) to grant access to
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class _WorkspaceAccessState:
    def __init__(__self__, *,
                 accessor_id: Optional[pulumi.Input[str]] = None,
                 accessor_type: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 workspace_role_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkspaceAccess resources.
        :param pulumi.Input[str] accessor_id: ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        :param pulumi.Input[str] accessor_type: USER | SERVICE_ACCOUNT | TEAM
        :param pulumi.Input[str] account_id: Account ID (UUID) where the workspace is located
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID) to grant access to
        :param pulumi.Input[str] workspace_role_id: Workspace Role ID (UUID) to grant to accessor
        """
        if accessor_id is not None:
            pulumi.set(__self__, "accessor_id", accessor_id)
        if accessor_type is not None:
            pulumi.set(__self__, "accessor_type", accessor_type)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)
        if workspace_role_id is not None:
            pulumi.set(__self__, "workspace_role_id", workspace_role_id)

    @property
    @pulumi.getter(name="accessorId")
    def accessor_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        """
        return pulumi.get(self, "accessor_id")

    @accessor_id.setter
    def accessor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accessor_id", value)

    @property
    @pulumi.getter(name="accessorType")
    def accessor_type(self) -> Optional[pulumi.Input[str]]:
        """
        USER | SERVICE_ACCOUNT | TEAM
        """
        return pulumi.get(self, "accessor_type")

    @accessor_type.setter
    def accessor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accessor_type", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Account ID (UUID) where the workspace is located
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace ID (UUID) to grant access to
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="workspaceRoleId")
    def workspace_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace Role ID (UUID) to grant to accessor
        """
        return pulumi.get(self, "workspace_role_id")

    @workspace_role_id.setter
    def workspace_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_role_id", value)


class WorkspaceAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accessor_id: Optional[pulumi.Input[str]] = None,
                 accessor_type: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 workspace_role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The resource `workspace_access` represents a connection between an accessor (User, Service Account or Team) with a Workspace Role. This resource specifies an actor's access level to a specific Workspace in the Account.

        Use this resource in conjunction with the `workspace_role` resource or data source to manage access to Workspaces.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect

        developer = prefect.get_workspace_role(name="Developer")
        marvin = prefect.get_account_member(email="marvin@prefect.io")
        # Assign the Workspace Role to the Account Member
        marvin_developer = prefect.WorkspaceAccess("marvinDeveloper",
            accessor_type="USER",
            accessor_id=prefect_account_member["marvin"]["user_id"],
            workspace_id="00000000-0000-0000-0000-000000000000",
            workspace_role_id=developer.id)
        # ASSIGNING WORKSPACE ACCESS TO A SERVICE ACCOUNT
        # Create a Service Account resource
        bot = prefect.ServiceAccount("bot")
        # Assign the Workspace Role to the Service Account
        bot_developer = prefect.WorkspaceAccess("botDeveloper",
            accessor_type="SERVICE_ACCOUNT",
            accessor_id=bot.id,
            workspace_id="00000000-0000-0000-0000-000000000000",
            workspace_role_id=developer.id)
        # ASSIGNING WORKSPACE ACCESS TO A TEAM
        # Assign the Workspace Role to the Team
        team_developer = prefect.WorkspaceAccess("teamDeveloper",
            accessor_type="TEAM",
            accessor_id="11111111-1111-1111-1111-111111111111",
            workspace_id="00000000-0000-0000-0000-000000000000",
            workspace_role_id=developer.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accessor_id: ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        :param pulumi.Input[str] accessor_type: USER | SERVICE_ACCOUNT | TEAM
        :param pulumi.Input[str] account_id: Account ID (UUID) where the workspace is located
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID) to grant access to
        :param pulumi.Input[str] workspace_role_id: Workspace Role ID (UUID) to grant to accessor
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkspaceAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The resource `workspace_access` represents a connection between an accessor (User, Service Account or Team) with a Workspace Role. This resource specifies an actor's access level to a specific Workspace in the Account.

        Use this resource in conjunction with the `workspace_role` resource or data source to manage access to Workspaces.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_prefect as prefect

        developer = prefect.get_workspace_role(name="Developer")
        marvin = prefect.get_account_member(email="marvin@prefect.io")
        # Assign the Workspace Role to the Account Member
        marvin_developer = prefect.WorkspaceAccess("marvinDeveloper",
            accessor_type="USER",
            accessor_id=prefect_account_member["marvin"]["user_id"],
            workspace_id="00000000-0000-0000-0000-000000000000",
            workspace_role_id=developer.id)
        # ASSIGNING WORKSPACE ACCESS TO A SERVICE ACCOUNT
        # Create a Service Account resource
        bot = prefect.ServiceAccount("bot")
        # Assign the Workspace Role to the Service Account
        bot_developer = prefect.WorkspaceAccess("botDeveloper",
            accessor_type="SERVICE_ACCOUNT",
            accessor_id=bot.id,
            workspace_id="00000000-0000-0000-0000-000000000000",
            workspace_role_id=developer.id)
        # ASSIGNING WORKSPACE ACCESS TO A TEAM
        # Assign the Workspace Role to the Team
        team_developer = prefect.WorkspaceAccess("teamDeveloper",
            accessor_type="TEAM",
            accessor_id="11111111-1111-1111-1111-111111111111",
            workspace_id="00000000-0000-0000-0000-000000000000",
            workspace_role_id=developer.id)
        ```

        :param str resource_name: The name of the resource.
        :param WorkspaceAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accessor_id: Optional[pulumi.Input[str]] = None,
                 accessor_type: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 workspace_role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceAccessArgs.__new__(WorkspaceAccessArgs)

            if accessor_id is None and not opts.urn:
                raise TypeError("Missing required property 'accessor_id'")
            __props__.__dict__["accessor_id"] = accessor_id
            if accessor_type is None and not opts.urn:
                raise TypeError("Missing required property 'accessor_type'")
            __props__.__dict__["accessor_type"] = accessor_type
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["workspace_id"] = workspace_id
            if workspace_role_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_role_id'")
            __props__.__dict__["workspace_role_id"] = workspace_role_id
        super(WorkspaceAccess, __self__).__init__(
            'prefect:index/workspaceAccess:WorkspaceAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accessor_id: Optional[pulumi.Input[str]] = None,
            accessor_type: Optional[pulumi.Input[str]] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None,
            workspace_role_id: Optional[pulumi.Input[str]] = None) -> 'WorkspaceAccess':
        """
        Get an existing WorkspaceAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accessor_id: ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        :param pulumi.Input[str] accessor_type: USER | SERVICE_ACCOUNT | TEAM
        :param pulumi.Input[str] account_id: Account ID (UUID) where the workspace is located
        :param pulumi.Input[str] workspace_id: Workspace ID (UUID) to grant access to
        :param pulumi.Input[str] workspace_role_id: Workspace Role ID (UUID) to grant to accessor
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkspaceAccessState.__new__(_WorkspaceAccessState)

        __props__.__dict__["accessor_id"] = accessor_id
        __props__.__dict__["accessor_type"] = accessor_type
        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["workspace_id"] = workspace_id
        __props__.__dict__["workspace_role_id"] = workspace_role_id
        return WorkspaceAccess(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessorId")
    def accessor_id(self) -> pulumi.Output[str]:
        """
        ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        """
        return pulumi.get(self, "accessor_id")

    @property
    @pulumi.getter(name="accessorType")
    def accessor_type(self) -> pulumi.Output[str]:
        """
        USER | SERVICE_ACCOUNT | TEAM
        """
        return pulumi.get(self, "accessor_type")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[Optional[str]]:
        """
        Account ID (UUID) where the workspace is located
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[Optional[str]]:
        """
        Workspace ID (UUID) to grant access to
        """
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter(name="workspaceRoleId")
    def workspace_role_id(self) -> pulumi.Output[str]:
        """
        Workspace Role ID (UUID) to grant to accessor
        """
        return pulumi.get(self, "workspace_role_id")

