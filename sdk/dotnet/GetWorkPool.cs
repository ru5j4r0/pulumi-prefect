// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prefect
{
    public static class GetWorkPool
    {
        /// <summary>
        /// Get information about an existing Work Pool by name.
        /// &lt;br&gt;
        /// Use this data source to obtain Work Pool-specific attributes.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Prefect = Pulumi.Prefect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPool = Prefect.GetWorkPool.Invoke(new()
        ///     {
        ///         Name = "my-work-pool",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkPoolResult> InvokeAsync(GetWorkPoolArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkPoolResult>("prefect:index/getWorkPool:getWorkPool", args ?? new GetWorkPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about an existing Work Pool by name.
        /// &lt;br&gt;
        /// Use this data source to obtain Work Pool-specific attributes.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Prefect = Pulumi.Prefect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myPool = Prefect.GetWorkPool.Invoke(new()
        ///     {
        ///         Name = "my-work-pool",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkPoolResult> Invoke(GetWorkPoolInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkPoolResult>("prefect:index/getWorkPool:getWorkPool", args ?? new GetWorkPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The concurrency limit applied to this work pool
        /// </summary>
        [Input("concurrencyLimit")]
        public int? ConcurrencyLimit { get; set; }

        /// <summary>
        /// The ID (UUID) of the default queue associated with this work pool
        /// </summary>
        [Input("defaultQueueId")]
        public string? DefaultQueueId { get; set; }

        /// <summary>
        /// Description of the work pool
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Work pool ID (UUID)
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the work pool
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetWorkPoolArgs()
        {
        }
        public static new GetWorkPoolArgs Empty => new GetWorkPoolArgs();
    }

    public sealed class GetWorkPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The concurrency limit applied to this work pool
        /// </summary>
        [Input("concurrencyLimit")]
        public Input<int>? ConcurrencyLimit { get; set; }

        /// <summary>
        /// The ID (UUID) of the default queue associated with this work pool
        /// </summary>
        [Input("defaultQueueId")]
        public Input<string>? DefaultQueueId { get; set; }

        /// <summary>
        /// Description of the work pool
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Work pool ID (UUID)
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the work pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetWorkPoolInvokeArgs()
        {
        }
        public static new GetWorkPoolInvokeArgs Empty => new GetWorkPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkPoolResult
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        public readonly string? AccountId;
        /// <summary>
        /// The base job template for the work pool, as a JSON string
        /// </summary>
        public readonly string BaseJobTemplate;
        /// <summary>
        /// The concurrency limit applied to this work pool
        /// </summary>
        public readonly int ConcurrencyLimit;
        /// <summary>
        /// Date and time of the work pool creation in RFC 3339 format
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// The ID (UUID) of the default queue associated with this work pool
        /// </summary>
        public readonly string DefaultQueueId;
        /// <summary>
        /// Description of the work pool
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Work pool ID (UUID)
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the work pool
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether this work pool is paused
        /// </summary>
        public readonly bool Paused;
        /// <summary>
        /// Type of the work pool
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Date and time that the work pool was last updated in RFC 3339 format
        /// </summary>
        public readonly string Updated;
        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetWorkPoolResult(
            string? accountId,

            string baseJobTemplate,

            int concurrencyLimit,

            string created,

            string defaultQueueId,

            string description,

            string id,

            string name,

            bool paused,

            string type,

            string updated,

            string? workspaceId)
        {
            AccountId = accountId;
            BaseJobTemplate = baseJobTemplate;
            ConcurrencyLimit = concurrencyLimit;
            Created = created;
            DefaultQueueId = defaultQueueId;
            Description = description;
            Id = id;
            Name = name;
            Paused = paused;
            Type = type;
            Updated = updated;
            WorkspaceId = workspaceId;
        }
    }
}
