// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prefect
{
    /// <summary>
    /// The resource `workspace_access` represents a connection between an accessor (User, Service Account or Team) with a Workspace Role. This resource specifies an actor's access level to a specific Workspace in the Account.
    /// 
    /// Use this resource in conjunction with the `workspace_role` resource or data source to manage access to Workspaces.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Prefect = Pulumi.Prefect;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var developer = Prefect.GetWorkspaceRole.Invoke(new()
    ///     {
    ///         Name = "Developer",
    ///     });
    /// 
    ///     var marvin = Prefect.GetAccountMember.Invoke(new()
    ///     {
    ///         Email = "marvin@prefect.io",
    ///     });
    /// 
    ///     // Assign the Workspace Role to the Account Member
    ///     var marvinDeveloper = new Prefect.WorkspaceAccess("marvinDeveloper", new()
    ///     {
    ///         AccessorType = "USER",
    ///         AccessorId = prefect_account_member.Marvin.User_id,
    ///         WorkspaceId = "00000000-0000-0000-0000-000000000000",
    ///         WorkspaceRoleId = developer.Apply(getWorkspaceRoleResult =&gt; getWorkspaceRoleResult.Id),
    ///     });
    /// 
    ///     // ASSIGNING WORKSPACE ACCESS TO A SERVICE ACCOUNT
    ///     // Create a Service Account resource
    ///     var bot = new Prefect.ServiceAccount("bot");
    /// 
    ///     // Assign the Workspace Role to the Service Account
    ///     var botDeveloper = new Prefect.WorkspaceAccess("botDeveloper", new()
    ///     {
    ///         AccessorType = "SERVICE_ACCOUNT",
    ///         AccessorId = bot.Id,
    ///         WorkspaceId = "00000000-0000-0000-0000-000000000000",
    ///         WorkspaceRoleId = developer.Apply(getWorkspaceRoleResult =&gt; getWorkspaceRoleResult.Id),
    ///     });
    /// 
    ///     // ASSIGNING WORKSPACE ACCESS TO A TEAM
    ///     // Assign the Workspace Role to the Team
    ///     var teamDeveloper = new Prefect.WorkspaceAccess("teamDeveloper", new()
    ///     {
    ///         AccessorType = "TEAM",
    ///         AccessorId = "11111111-1111-1111-1111-111111111111",
    ///         WorkspaceId = "00000000-0000-0000-0000-000000000000",
    ///         WorkspaceRoleId = developer.Apply(getWorkspaceRoleResult =&gt; getWorkspaceRoleResult.Id),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [PrefectResourceType("prefect:index/workspaceAccess:WorkspaceAccess")]
    public partial class WorkspaceAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        /// </summary>
        [Output("accessorId")]
        public Output<string> AccessorId { get; private set; } = null!;

        /// <summary>
        /// USER | SERVICE_ACCOUNT | TEAM
        /// </summary>
        [Output("accessorType")]
        public Output<string> AccessorType { get; private set; } = null!;

        /// <summary>
        /// Account ID (UUID) where the workspace is located
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// Workspace ID (UUID) to grant access to
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;

        /// <summary>
        /// Workspace Role ID (UUID) to grant to accessor
        /// </summary>
        [Output("workspaceRoleId")]
        public Output<string> WorkspaceRoleId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkspaceAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkspaceAccess(string name, WorkspaceAccessArgs args, CustomResourceOptions? options = null)
            : base("prefect:index/workspaceAccess:WorkspaceAccess", name, args ?? new WorkspaceAccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkspaceAccess(string name, Input<string> id, WorkspaceAccessState? state = null, CustomResourceOptions? options = null)
            : base("prefect:index/workspaceAccess:WorkspaceAccess", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ru5j4r0/pulumi-prefect/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkspaceAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkspaceAccess Get(string name, Input<string> id, WorkspaceAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkspaceAccess(name, id, state, options);
        }
    }

    public sealed class WorkspaceAccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        /// </summary>
        [Input("accessorId", required: true)]
        public Input<string> AccessorId { get; set; } = null!;

        /// <summary>
        /// USER | SERVICE_ACCOUNT | TEAM
        /// </summary>
        [Input("accessorType", required: true)]
        public Input<string> AccessorType { get; set; } = null!;

        /// <summary>
        /// Account ID (UUID) where the workspace is located
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Workspace ID (UUID) to grant access to
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        /// <summary>
        /// Workspace Role ID (UUID) to grant to accessor
        /// </summary>
        [Input("workspaceRoleId", required: true)]
        public Input<string> WorkspaceRoleId { get; set; } = null!;

        public WorkspaceAccessArgs()
        {
        }
        public static new WorkspaceAccessArgs Empty => new WorkspaceAccessArgs();
    }

    public sealed class WorkspaceAccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
        /// </summary>
        [Input("accessorId")]
        public Input<string>? AccessorId { get; set; }

        /// <summary>
        /// USER | SERVICE_ACCOUNT | TEAM
        /// </summary>
        [Input("accessorType")]
        public Input<string>? AccessorType { get; set; }

        /// <summary>
        /// Account ID (UUID) where the workspace is located
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Workspace ID (UUID) to grant access to
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        /// <summary>
        /// Workspace Role ID (UUID) to grant to accessor
        /// </summary>
        [Input("workspaceRoleId")]
        public Input<string>? WorkspaceRoleId { get; set; }

        public WorkspaceAccessState()
        {
        }
        public static new WorkspaceAccessState Empty => new WorkspaceAccessState();
    }
}
