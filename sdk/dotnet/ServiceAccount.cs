// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prefect
{
    /// <summary>
    /// The resource `service_account` represents a Prefect Cloud Service Account. A Service Account allows you to create an API Key that is not associated with a user account.
    /// 
    /// Service Accounts are used to configure API access for workers or programs. Use this resource to provision and rotate Keys as well as assign Account and Workspace Access through Roles.
    /// 
    /// API Keys for `service_account` resources can be rotated by modifying the `api_key_expiration` attribute.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Prefect = Pulumi.Prefect;
    /// using Time = Pulumiverse.Time;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // NON-EXPIRING API KEY
    ///     var exampleServiceAccount = new Prefect.ServiceAccount("exampleServiceAccount");
    /// 
    ///     var ninetyDays = new Time.Rotating("ninetyDays", new()
    ///     {
    ///         RotationDays = 90,
    ///     });
    /// 
    ///     // Pass the time_rotating resource to the `api_key_expiration` attribute
    ///     // in order to automate the rotation of the Service Account key
    ///     var exampleIndex_serviceAccountServiceAccount = new Prefect.ServiceAccount("exampleIndex/serviceAccountServiceAccount", new()
    ///     {
    ///         ApiKeyExpiration = ninetyDays.RotationRfc3339,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Prefect Service Accounts can be imported via name in the form `name/my-bot-name`
    /// 
    /// ```sh
    /// $ pulumi import prefect:index/serviceAccount:ServiceAccount example name/my-bot-name
    /// ```
    /// 
    /// Prefect Service Accounts can also be imported via UUID
    /// 
    /// ```sh
    /// $ pulumi import prefect:index/serviceAccount:ServiceAccount example 00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [PrefectResourceType("prefect:index/serviceAccount:ServiceAccount")]
    public partial class ServiceAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Account Role name of the service account
        /// </summary>
        [Output("accountRoleName")]
        public Output<string> AccountRoleName { get; private set; } = null!;

        /// <summary>
        /// API Key associated with the service account
        /// </summary>
        [Output("apiKey")]
        public Output<string> ApiKey { get; private set; } = null!;

        /// <summary>
        /// Timestamp of the API Key creation (RFC3339)
        /// </summary>
        [Output("apiKeyCreated")]
        public Output<string> ApiKeyCreated { get; private set; } = null!;

        /// <summary>
        /// Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        /// </summary>
        [Output("apiKeyExpiration")]
        public Output<string?> ApiKeyExpiration { get; private set; } = null!;

        /// <summary>
        /// API Key ID associated with the service account
        /// </summary>
        [Output("apiKeyId")]
        public Output<string> ApiKeyId { get; private set; } = null!;

        /// <summary>
        /// API Key Name associated with the service account
        /// </summary>
        [Output("apiKeyName")]
        public Output<string> ApiKeyName { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was created (RFC3339)
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Name of the service account
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was updated (RFC3339)
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAccount(string name, ServiceAccountArgs? args = null, CustomResourceOptions? options = null)
            : base("prefect:index/serviceAccount:ServiceAccount", name, args ?? new ServiceAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAccount(string name, Input<string> id, ServiceAccountState? state = null, CustomResourceOptions? options = null)
            : base("prefect:index/serviceAccount:ServiceAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ru5j4r0/pulumi-prefect/releases/",
                AdditionalSecretOutputs =
                {
                    "apiKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAccount Get(string name, Input<string> id, ServiceAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAccount(name, id, state, options);
        }
    }

    public sealed class ServiceAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Account Role name of the service account
        /// </summary>
        [Input("accountRoleName")]
        public Input<string>? AccountRoleName { get; set; }

        /// <summary>
        /// Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        /// </summary>
        [Input("apiKeyExpiration")]
        public Input<string>? ApiKeyExpiration { get; set; }

        /// <summary>
        /// Name of the service account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ServiceAccountArgs()
        {
        }
        public static new ServiceAccountArgs Empty => new ServiceAccountArgs();
    }

    public sealed class ServiceAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Account Role name of the service account
        /// </summary>
        [Input("accountRoleName")]
        public Input<string>? AccountRoleName { get; set; }

        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// API Key associated with the service account
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Timestamp of the API Key creation (RFC3339)
        /// </summary>
        [Input("apiKeyCreated")]
        public Input<string>? ApiKeyCreated { get; set; }

        /// <summary>
        /// Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to force a key rotation.
        /// </summary>
        [Input("apiKeyExpiration")]
        public Input<string>? ApiKeyExpiration { get; set; }

        /// <summary>
        /// API Key ID associated with the service account
        /// </summary>
        [Input("apiKeyId")]
        public Input<string>? ApiKeyId { get; set; }

        /// <summary>
        /// API Key Name associated with the service account
        /// </summary>
        [Input("apiKeyName")]
        public Input<string>? ApiKeyName { get; set; }

        /// <summary>
        /// Timestamp of when the resource was created (RFC3339)
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Name of the service account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Timestamp of when the resource was updated (RFC3339)
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        public ServiceAccountState()
        {
        }
        public static new ServiceAccountState Empty => new ServiceAccountState();
    }
}
