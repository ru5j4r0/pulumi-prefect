// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prefect
{
    /// <summary>
    /// The resource `work_pool` represents a Prefect Cloud Work Pool. Work Pools represent infrastructure configurations for jobs across several common environments.
    /// 
    /// Work Pools can be set up with default base job configurations, based on which type. Use this in conjunction with the `prefect.getWorkerMetadata` data source to bootstrap new Work Pools quickly.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Prefect = Pulumi.Prefect;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWorkPool = new Prefect.WorkPool("exampleWorkPool", new()
    ///     {
    ///         Type = "kubernetes",
    ///         Paused = false,
    ///         WorkspaceId = "my-workspace-id",
    ///     });
    /// 
    ///     // Use a JSON file to load a base job configuration
    ///     var exampleIndex_workPoolWorkPool = new Prefect.WorkPool("exampleIndex/workPoolWorkPool", new()
    ///     {
    ///         Type = "kubernetes",
    ///         WorkspaceId = data.Prefect_workspace.Prd.Id,
    ///         Paused = false,
    ///         BaseJobTemplate = File.ReadAllText("./base-job-template.json"),
    ///     });
    /// 
    ///     var workerMetadata = Prefect.GetWorkerMetadata.Invoke();
    /// 
    ///     var examplePrefectIndex_workPoolWorkPool = new Prefect.WorkPool("examplePrefectIndex/workPoolWorkPool", new()
    ///     {
    ///         Type = "kubernetes",
    ///         WorkspaceId = data.Prefect_workspace.Prd.Id,
    ///         Paused = false,
    ///         BaseJobTemplate = workerMetadata.Apply(getWorkerMetadataResult =&gt; getWorkerMetadataResult.BaseJobConfigs?.Kubernetes),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Prefect Work Pools can be imported using the format `workspace_id,name`
    /// 
    /// ```sh
    /// $ pulumi import prefect:index/workPool:WorkPool example 00000000-0000-0000-0000-000000000000,kubernetes-work-pool
    /// ```
    /// 
    /// You can also import by name only if you have a workspace_id set in your provider
    /// 
    /// ```sh
    /// $ pulumi import prefect:index/workPool:WorkPool example kubernetes-work-pool
    /// ```
    /// </summary>
    [PrefectResourceType("prefect:index/workPool:WorkPool")]
    public partial class WorkPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// The base job template for the work pool, as a JSON string
        /// </summary>
        [Output("baseJobTemplate")]
        public Output<string> BaseJobTemplate { get; private set; } = null!;

        /// <summary>
        /// The concurrency limit applied to this work pool
        /// </summary>
        [Output("concurrencyLimit")]
        public Output<int?> ConcurrencyLimit { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was created (RFC3339)
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The ID (UUID) of the default queue associated with this work pool
        /// </summary>
        [Output("defaultQueueId")]
        public Output<string> DefaultQueueId { get; private set; } = null!;

        /// <summary>
        /// Description of the work pool
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the work pool
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether this work pool is paused
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// Type of the work pool, eg. kubernetes, ecs, process, etc.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was updated (RFC3339)
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        [Output("workspaceId")]
        public Output<string?> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkPool(string name, WorkPoolArgs? args = null, CustomResourceOptions? options = null)
            : base("prefect:index/workPool:WorkPool", name, args ?? new WorkPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkPool(string name, Input<string> id, WorkPoolState? state = null, CustomResourceOptions? options = null)
            : base("prefect:index/workPool:WorkPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/ru5j4r0/pulumi-prefect/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkPool Get(string name, Input<string> id, WorkPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkPool(name, id, state, options);
        }
    }

    public sealed class WorkPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The base job template for the work pool, as a JSON string
        /// </summary>
        [Input("baseJobTemplate")]
        public Input<string>? BaseJobTemplate { get; set; }

        /// <summary>
        /// The concurrency limit applied to this work pool
        /// </summary>
        [Input("concurrencyLimit")]
        public Input<int>? ConcurrencyLimit { get; set; }

        /// <summary>
        /// Description of the work pool
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the work pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this work pool is paused
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Type of the work pool, eg. kubernetes, ecs, process, etc.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public WorkPoolArgs()
        {
        }
        public static new WorkPoolArgs Empty => new WorkPoolArgs();
    }

    public sealed class WorkPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The base job template for the work pool, as a JSON string
        /// </summary>
        [Input("baseJobTemplate")]
        public Input<string>? BaseJobTemplate { get; set; }

        /// <summary>
        /// The concurrency limit applied to this work pool
        /// </summary>
        [Input("concurrencyLimit")]
        public Input<int>? ConcurrencyLimit { get; set; }

        /// <summary>
        /// Timestamp of when the resource was created (RFC3339)
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The ID (UUID) of the default queue associated with this work pool
        /// </summary>
        [Input("defaultQueueId")]
        public Input<string>? DefaultQueueId { get; set; }

        /// <summary>
        /// Description of the work pool
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the work pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this work pool is paused
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Type of the work pool, eg. kubernetes, ecs, process, etc.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Timestamp of when the resource was updated (RFC3339)
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public WorkPoolState()
        {
        }
        public static new WorkPoolState Empty => new WorkPoolState();
    }
}
