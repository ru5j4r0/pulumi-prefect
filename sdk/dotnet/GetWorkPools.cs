// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prefect
{
    public static class GetWorkPools
    {
        /// <summary>
        /// Get information about an multiple Work Pools.
        /// &lt;br&gt;
        /// Use this data source to search for multiple Work Pools. Defaults to fetching all Work Pools in the Workspace.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Prefect = Pulumi.Prefect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var allPools = Prefect.GetWorkPools.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkPoolsResult> InvokeAsync(GetWorkPoolsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkPoolsResult>("prefect:index/getWorkPools:getWorkPools", args ?? new GetWorkPoolsArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about an multiple Work Pools.
        /// &lt;br&gt;
        /// Use this data source to search for multiple Work Pools. Defaults to fetching all Work Pools in the Workspace.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Prefect = Pulumi.Prefect;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var allPools = Prefect.GetWorkPools.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkPoolsResult> Invoke(GetWorkPoolsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkPoolsResult>("prefect:index/getWorkPools:getWorkPools", args ?? new GetWorkPoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkPoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        [Input("filterAnies")]
        private List<string>? _filterAnies;

        /// <summary>
        /// Work pool IDs (UUID) to search for (work pools with any matching UUID are returned)
        /// </summary>
        public List<string> FilterAnies
        {
            get => _filterAnies ?? (_filterAnies = new List<string>());
            set => _filterAnies = value;
        }

        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetWorkPoolsArgs()
        {
        }
        public static new GetWorkPoolsArgs Empty => new GetWorkPoolsArgs();
    }

    public sealed class GetWorkPoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("filterAnies")]
        private InputList<string>? _filterAnies;

        /// <summary>
        /// Work pool IDs (UUID) to search for (work pools with any matching UUID are returned)
        /// </summary>
        public InputList<string> FilterAnies
        {
            get => _filterAnies ?? (_filterAnies = new InputList<string>());
            set => _filterAnies = value;
        }

        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetWorkPoolsInvokeArgs()
        {
        }
        public static new GetWorkPoolsInvokeArgs Empty => new GetWorkPoolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkPoolsResult
    {
        /// <summary>
        /// Account ID (UUID), defaults to the account set in the provider
        /// </summary>
        public readonly string? AccountId;
        /// <summary>
        /// Work pool IDs (UUID) to search for (work pools with any matching UUID are returned)
        /// </summary>
        public readonly ImmutableArray<string> FilterAnies;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Work pools returned by the server
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkPoolsWorkPoolResult> WorkPools;
        /// <summary>
        /// Workspace ID (UUID), defaults to the workspace set in the provider
        /// </summary>
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private GetWorkPoolsResult(
            string? accountId,

            ImmutableArray<string> filterAnies,

            string id,

            ImmutableArray<Outputs.GetWorkPoolsWorkPoolResult> workPools,

            string? workspaceId)
        {
            AccountId = accountId;
            FilterAnies = filterAnies;
            Id = id;
            WorkPools = workPools;
            WorkspaceId = workspaceId;
        }
    }
}
