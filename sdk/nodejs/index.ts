// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountMemberArgs, GetAccountMemberResult, GetAccountMemberOutputArgs } from "./getAccountMember";
export const getAccountMember: typeof import("./getAccountMember").getAccountMember = null as any;
export const getAccountMemberOutput: typeof import("./getAccountMember").getAccountMemberOutput = null as any;
utilities.lazyLoad(exports, ["getAccountMember","getAccountMemberOutput"], () => require("./getAccountMember"));

export { GetAccountMembersArgs, GetAccountMembersResult, GetAccountMembersOutputArgs } from "./getAccountMembers";
export const getAccountMembers: typeof import("./getAccountMembers").getAccountMembers = null as any;
export const getAccountMembersOutput: typeof import("./getAccountMembers").getAccountMembersOutput = null as any;
utilities.lazyLoad(exports, ["getAccountMembers","getAccountMembersOutput"], () => require("./getAccountMembers"));

export { GetAccountRoleArgs, GetAccountRoleResult, GetAccountRoleOutputArgs } from "./getAccountRole";
export const getAccountRole: typeof import("./getAccountRole").getAccountRole = null as any;
export const getAccountRoleOutput: typeof import("./getAccountRole").getAccountRoleOutput = null as any;
utilities.lazyLoad(exports, ["getAccountRole","getAccountRoleOutput"], () => require("./getAccountRole"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTeamsArgs, GetTeamsResult, GetTeamsOutputArgs } from "./getTeams";
export const getTeams: typeof import("./getTeams").getTeams = null as any;
export const getTeamsOutput: typeof import("./getTeams").getTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getTeams","getTeamsOutput"], () => require("./getTeams"));

export { GetVariableArgs, GetVariableResult, GetVariableOutputArgs } from "./getVariable";
export const getVariable: typeof import("./getVariable").getVariable = null as any;
export const getVariableOutput: typeof import("./getVariable").getVariableOutput = null as any;
utilities.lazyLoad(exports, ["getVariable","getVariableOutput"], () => require("./getVariable"));

export { GetWorkPoolArgs, GetWorkPoolResult, GetWorkPoolOutputArgs } from "./getWorkPool";
export const getWorkPool: typeof import("./getWorkPool").getWorkPool = null as any;
export const getWorkPoolOutput: typeof import("./getWorkPool").getWorkPoolOutput = null as any;
utilities.lazyLoad(exports, ["getWorkPool","getWorkPoolOutput"], () => require("./getWorkPool"));

export { GetWorkPoolsArgs, GetWorkPoolsResult, GetWorkPoolsOutputArgs } from "./getWorkPools";
export const getWorkPools: typeof import("./getWorkPools").getWorkPools = null as any;
export const getWorkPoolsOutput: typeof import("./getWorkPools").getWorkPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkPools","getWorkPoolsOutput"], () => require("./getWorkPools"));

export { GetWorkerMetadataResult } from "./getWorkerMetadata";
export const getWorkerMetadata: typeof import("./getWorkerMetadata").getWorkerMetadata = null as any;
export const getWorkerMetadataOutput: typeof import("./getWorkerMetadata").getWorkerMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getWorkerMetadata","getWorkerMetadataOutput"], () => require("./getWorkerMetadata"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GetWorkspaceRoleArgs, GetWorkspaceRoleResult, GetWorkspaceRoleOutputArgs } from "./getWorkspaceRole";
export const getWorkspaceRole: typeof import("./getWorkspaceRole").getWorkspaceRole = null as any;
export const getWorkspaceRoleOutput: typeof import("./getWorkspaceRole").getWorkspaceRoleOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceRole","getWorkspaceRoleOutput"], () => require("./getWorkspaceRole"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));

export { WorkPoolArgs, WorkPoolState } from "./workPool";
export type WorkPool = import("./workPool").WorkPool;
export const WorkPool: typeof import("./workPool").WorkPool = null as any;
utilities.lazyLoad(exports, ["WorkPool"], () => require("./workPool"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceAccessArgs, WorkspaceAccessState } from "./workspaceAccess";
export type WorkspaceAccess = import("./workspaceAccess").WorkspaceAccess;
export const WorkspaceAccess: typeof import("./workspaceAccess").WorkspaceAccess = null as any;
utilities.lazyLoad(exports, ["WorkspaceAccess"], () => require("./workspaceAccess"));

export { WorkspaceRoleArgs, WorkspaceRoleState } from "./workspaceRole";
export type WorkspaceRole = import("./workspaceRole").WorkspaceRole;
export const WorkspaceRole: typeof import("./workspaceRole").WorkspaceRole = null as any;
utilities.lazyLoad(exports, ["WorkspaceRole"], () => require("./workspaceRole"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "prefect:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "prefect:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "prefect:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            case "prefect:index/workPool:WorkPool":
                return new WorkPool(name, <any>undefined, { urn })
            case "prefect:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "prefect:index/workspaceAccess:WorkspaceAccess":
                return new WorkspaceAccess(name, <any>undefined, { urn })
            case "prefect:index/workspaceRole:WorkspaceRole":
                return new WorkspaceRole(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("prefect", "index/account", _module)
pulumi.runtime.registerResourceModule("prefect", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("prefect", "index/variable", _module)
pulumi.runtime.registerResourceModule("prefect", "index/workPool", _module)
pulumi.runtime.registerResourceModule("prefect", "index/workspace", _module)
pulumi.runtime.registerResourceModule("prefect", "index/workspaceAccess", _module)
pulumi.runtime.registerResourceModule("prefect", "index/workspaceRole", _module)
pulumi.runtime.registerResourcePackage("prefect", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:prefect") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
