// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package prefect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ru5j4r0/pulumi-prefect/sdk/go/prefect/internal"
)

// The resource `workspaceAccess` represents a connection between an accessor (User, Service Account or Team) with a Workspace Role. This resource specifies an actor's access level to a specific Workspace in the Account.
//
// Use this resource in conjunction with the `workspaceRole` resource or data source to manage access to Workspaces.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ru5j4r0/pulumi-prefect/sdk/go/prefect"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			developer, err := prefect.LookupWorkspaceRole(ctx, &prefect.LookupWorkspaceRoleArgs{
//				Name: "Developer",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = prefect.GetAccountMember(ctx, &prefect.GetAccountMemberArgs{
//				Email: "marvin@prefect.io",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Assign the Workspace Role to the Account Member
//			_, err = prefect.NewWorkspaceAccess(ctx, "marvinDeveloper", &prefect.WorkspaceAccessArgs{
//				AccessorType:    pulumi.String("USER"),
//				AccessorId:      pulumi.Any(prefect_account_member.Marvin.User_id),
//				WorkspaceId:     pulumi.String("00000000-0000-0000-0000-000000000000"),
//				WorkspaceRoleId: pulumi.String(developer.Id),
//			})
//			if err != nil {
//				return err
//			}
//			// ASSIGNING WORKSPACE ACCESS TO A SERVICE ACCOUNT
//			// Create a Service Account resource
//			bot, err := prefect.NewServiceAccount(ctx, "bot", nil)
//			if err != nil {
//				return err
//			}
//			// Assign the Workspace Role to the Service Account
//			_, err = prefect.NewWorkspaceAccess(ctx, "botDeveloper", &prefect.WorkspaceAccessArgs{
//				AccessorType:    pulumi.String("SERVICE_ACCOUNT"),
//				AccessorId:      bot.ID(),
//				WorkspaceId:     pulumi.String("00000000-0000-0000-0000-000000000000"),
//				WorkspaceRoleId: pulumi.String(developer.Id),
//			})
//			if err != nil {
//				return err
//			}
//			// Assign the Workspace Role to the Team
//			_, err = prefect.NewWorkspaceAccess(ctx, "teamDeveloper", &prefect.WorkspaceAccessArgs{
//				AccessorType:    pulumi.String("TEAM"),
//				AccessorId:      pulumi.String("11111111-1111-1111-1111-111111111111"),
//				WorkspaceId:     pulumi.String("00000000-0000-0000-0000-000000000000"),
//				WorkspaceRoleId: pulumi.String(developer.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type WorkspaceAccess struct {
	pulumi.CustomResourceState

	// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
	AccessorId pulumi.StringOutput `pulumi:"accessorId"`
	// USER | SERVICE_ACCOUNT | TEAM
	AccessorType pulumi.StringOutput `pulumi:"accessorType"`
	// Account ID (UUID) where the workspace is located
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Workspace ID (UUID) to grant access to
	WorkspaceId pulumi.StringPtrOutput `pulumi:"workspaceId"`
	// Workspace Role ID (UUID) to grant to accessor
	WorkspaceRoleId pulumi.StringOutput `pulumi:"workspaceRoleId"`
}

// NewWorkspaceAccess registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceAccess(ctx *pulumi.Context,
	name string, args *WorkspaceAccessArgs, opts ...pulumi.ResourceOption) (*WorkspaceAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessorId == nil {
		return nil, errors.New("invalid value for required argument 'AccessorId'")
	}
	if args.AccessorType == nil {
		return nil, errors.New("invalid value for required argument 'AccessorType'")
	}
	if args.WorkspaceRoleId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceRoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceAccess
	err := ctx.RegisterResource("prefect:index/workspaceAccess:WorkspaceAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceAccess gets an existing WorkspaceAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceAccessState, opts ...pulumi.ResourceOption) (*WorkspaceAccess, error) {
	var resource WorkspaceAccess
	err := ctx.ReadResource("prefect:index/workspaceAccess:WorkspaceAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceAccess resources.
type workspaceAccessState struct {
	// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
	AccessorId *string `pulumi:"accessorId"`
	// USER | SERVICE_ACCOUNT | TEAM
	AccessorType *string `pulumi:"accessorType"`
	// Account ID (UUID) where the workspace is located
	AccountId *string `pulumi:"accountId"`
	// Workspace ID (UUID) to grant access to
	WorkspaceId *string `pulumi:"workspaceId"`
	// Workspace Role ID (UUID) to grant to accessor
	WorkspaceRoleId *string `pulumi:"workspaceRoleId"`
}

type WorkspaceAccessState struct {
	// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
	AccessorId pulumi.StringPtrInput
	// USER | SERVICE_ACCOUNT | TEAM
	AccessorType pulumi.StringPtrInput
	// Account ID (UUID) where the workspace is located
	AccountId pulumi.StringPtrInput
	// Workspace ID (UUID) to grant access to
	WorkspaceId pulumi.StringPtrInput
	// Workspace Role ID (UUID) to grant to accessor
	WorkspaceRoleId pulumi.StringPtrInput
}

func (WorkspaceAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceAccessState)(nil)).Elem()
}

type workspaceAccessArgs struct {
	// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
	AccessorId string `pulumi:"accessorId"`
	// USER | SERVICE_ACCOUNT | TEAM
	AccessorType string `pulumi:"accessorType"`
	// Account ID (UUID) where the workspace is located
	AccountId *string `pulumi:"accountId"`
	// Workspace ID (UUID) to grant access to
	WorkspaceId *string `pulumi:"workspaceId"`
	// Workspace Role ID (UUID) to grant to accessor
	WorkspaceRoleId string `pulumi:"workspaceRoleId"`
}

// The set of arguments for constructing a WorkspaceAccess resource.
type WorkspaceAccessArgs struct {
	// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
	AccessorId pulumi.StringInput
	// USER | SERVICE_ACCOUNT | TEAM
	AccessorType pulumi.StringInput
	// Account ID (UUID) where the workspace is located
	AccountId pulumi.StringPtrInput
	// Workspace ID (UUID) to grant access to
	WorkspaceId pulumi.StringPtrInput
	// Workspace Role ID (UUID) to grant to accessor
	WorkspaceRoleId pulumi.StringInput
}

func (WorkspaceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceAccessArgs)(nil)).Elem()
}

type WorkspaceAccessInput interface {
	pulumi.Input

	ToWorkspaceAccessOutput() WorkspaceAccessOutput
	ToWorkspaceAccessOutputWithContext(ctx context.Context) WorkspaceAccessOutput
}

func (*WorkspaceAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceAccess)(nil)).Elem()
}

func (i *WorkspaceAccess) ToWorkspaceAccessOutput() WorkspaceAccessOutput {
	return i.ToWorkspaceAccessOutputWithContext(context.Background())
}

func (i *WorkspaceAccess) ToWorkspaceAccessOutputWithContext(ctx context.Context) WorkspaceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAccessOutput)
}

// WorkspaceAccessArrayInput is an input type that accepts WorkspaceAccessArray and WorkspaceAccessArrayOutput values.
// You can construct a concrete instance of `WorkspaceAccessArrayInput` via:
//
//	WorkspaceAccessArray{ WorkspaceAccessArgs{...} }
type WorkspaceAccessArrayInput interface {
	pulumi.Input

	ToWorkspaceAccessArrayOutput() WorkspaceAccessArrayOutput
	ToWorkspaceAccessArrayOutputWithContext(context.Context) WorkspaceAccessArrayOutput
}

type WorkspaceAccessArray []WorkspaceAccessInput

func (WorkspaceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceAccess)(nil)).Elem()
}

func (i WorkspaceAccessArray) ToWorkspaceAccessArrayOutput() WorkspaceAccessArrayOutput {
	return i.ToWorkspaceAccessArrayOutputWithContext(context.Background())
}

func (i WorkspaceAccessArray) ToWorkspaceAccessArrayOutputWithContext(ctx context.Context) WorkspaceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAccessArrayOutput)
}

// WorkspaceAccessMapInput is an input type that accepts WorkspaceAccessMap and WorkspaceAccessMapOutput values.
// You can construct a concrete instance of `WorkspaceAccessMapInput` via:
//
//	WorkspaceAccessMap{ "key": WorkspaceAccessArgs{...} }
type WorkspaceAccessMapInput interface {
	pulumi.Input

	ToWorkspaceAccessMapOutput() WorkspaceAccessMapOutput
	ToWorkspaceAccessMapOutputWithContext(context.Context) WorkspaceAccessMapOutput
}

type WorkspaceAccessMap map[string]WorkspaceAccessInput

func (WorkspaceAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceAccess)(nil)).Elem()
}

func (i WorkspaceAccessMap) ToWorkspaceAccessMapOutput() WorkspaceAccessMapOutput {
	return i.ToWorkspaceAccessMapOutputWithContext(context.Background())
}

func (i WorkspaceAccessMap) ToWorkspaceAccessMapOutputWithContext(ctx context.Context) WorkspaceAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceAccessMapOutput)
}

type WorkspaceAccessOutput struct{ *pulumi.OutputState }

func (WorkspaceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceAccess)(nil)).Elem()
}

func (o WorkspaceAccessOutput) ToWorkspaceAccessOutput() WorkspaceAccessOutput {
	return o
}

func (o WorkspaceAccessOutput) ToWorkspaceAccessOutputWithContext(ctx context.Context) WorkspaceAccessOutput {
	return o
}

// ID (UUID) of accessor to the workspace. This can be an `account_member.user_id` or `service_account.id`
func (o WorkspaceAccessOutput) AccessorId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceAccess) pulumi.StringOutput { return v.AccessorId }).(pulumi.StringOutput)
}

// USER | SERVICE_ACCOUNT | TEAM
func (o WorkspaceAccessOutput) AccessorType() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceAccess) pulumi.StringOutput { return v.AccessorType }).(pulumi.StringOutput)
}

// Account ID (UUID) where the workspace is located
func (o WorkspaceAccessOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAccess) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Workspace ID (UUID) to grant access to
func (o WorkspaceAccessOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceAccess) pulumi.StringPtrOutput { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

// Workspace Role ID (UUID) to grant to accessor
func (o WorkspaceAccessOutput) WorkspaceRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceAccess) pulumi.StringOutput { return v.WorkspaceRoleId }).(pulumi.StringOutput)
}

type WorkspaceAccessArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceAccess)(nil)).Elem()
}

func (o WorkspaceAccessArrayOutput) ToWorkspaceAccessArrayOutput() WorkspaceAccessArrayOutput {
	return o
}

func (o WorkspaceAccessArrayOutput) ToWorkspaceAccessArrayOutputWithContext(ctx context.Context) WorkspaceAccessArrayOutput {
	return o
}

func (o WorkspaceAccessArrayOutput) Index(i pulumi.IntInput) WorkspaceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceAccess {
		return vs[0].([]*WorkspaceAccess)[vs[1].(int)]
	}).(WorkspaceAccessOutput)
}

type WorkspaceAccessMapOutput struct{ *pulumi.OutputState }

func (WorkspaceAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceAccess)(nil)).Elem()
}

func (o WorkspaceAccessMapOutput) ToWorkspaceAccessMapOutput() WorkspaceAccessMapOutput {
	return o
}

func (o WorkspaceAccessMapOutput) ToWorkspaceAccessMapOutputWithContext(ctx context.Context) WorkspaceAccessMapOutput {
	return o
}

func (o WorkspaceAccessMapOutput) MapIndex(k pulumi.StringInput) WorkspaceAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceAccess {
		return vs[0].(map[string]*WorkspaceAccess)[vs[1].(string)]
	}).(WorkspaceAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceAccessInput)(nil)).Elem(), &WorkspaceAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceAccessArrayInput)(nil)).Elem(), WorkspaceAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceAccessMapInput)(nil)).Elem(), WorkspaceAccessMap{})
	pulumi.RegisterOutputType(WorkspaceAccessOutput{})
	pulumi.RegisterOutputType(WorkspaceAccessArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceAccessMapOutput{})
}
