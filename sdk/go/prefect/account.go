// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package prefect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ru5j4r0/pulumi-prefect/sdk/go/prefect/internal"
)

// ## Example Usage
//
// ## Import
//
// # Prefect Accounts can be imported using the account's UUID
//
// ```sh
// $ pulumi import prefect:index/account:Account example 00000000-0000-0000-0000-000000000000
// ```
type Account struct {
	pulumi.CustomResourceState

	// Whether or not this account allows public workspaces
	AllowPublicWorkspaces pulumi.BoolPtrOutput `pulumi:"allowPublicWorkspaces"`
	// Billing email to apply to the account's Stripe customer
	BillingEmail pulumi.StringPtrOutput `pulumi:"billingEmail"`
	// Timestamp of when the resource was created (RFC3339)
	Created pulumi.StringOutput `pulumi:"created"`
	// Unique handle of the account
	Handle pulumi.StringOutput `pulumi:"handle"`
	// An optional for an external url associated with the account, e.g. https://prefect.io/
	Link pulumi.StringPtrOutput `pulumi:"link"`
	// An optional physical location for the account, e.g. Washington, D.C.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the account
	Name pulumi.StringOutput `pulumi:"name"`
	// Timestamp of when the resource was updated (RFC3339)
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Handle == nil {
		return nil, errors.New("invalid value for required argument 'Handle'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("prefect:index/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("prefect:index/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// Whether or not this account allows public workspaces
	AllowPublicWorkspaces *bool `pulumi:"allowPublicWorkspaces"`
	// Billing email to apply to the account's Stripe customer
	BillingEmail *string `pulumi:"billingEmail"`
	// Timestamp of when the resource was created (RFC3339)
	Created *string `pulumi:"created"`
	// Unique handle of the account
	Handle *string `pulumi:"handle"`
	// An optional for an external url associated with the account, e.g. https://prefect.io/
	Link *string `pulumi:"link"`
	// An optional physical location for the account, e.g. Washington, D.C.
	Location *string `pulumi:"location"`
	// Name of the account
	Name *string `pulumi:"name"`
	// Timestamp of when the resource was updated (RFC3339)
	Updated *string `pulumi:"updated"`
}

type AccountState struct {
	// Whether or not this account allows public workspaces
	AllowPublicWorkspaces pulumi.BoolPtrInput
	// Billing email to apply to the account's Stripe customer
	BillingEmail pulumi.StringPtrInput
	// Timestamp of when the resource was created (RFC3339)
	Created pulumi.StringPtrInput
	// Unique handle of the account
	Handle pulumi.StringPtrInput
	// An optional for an external url associated with the account, e.g. https://prefect.io/
	Link pulumi.StringPtrInput
	// An optional physical location for the account, e.g. Washington, D.C.
	Location pulumi.StringPtrInput
	// Name of the account
	Name pulumi.StringPtrInput
	// Timestamp of when the resource was updated (RFC3339)
	Updated pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// Whether or not this account allows public workspaces
	AllowPublicWorkspaces *bool `pulumi:"allowPublicWorkspaces"`
	// Billing email to apply to the account's Stripe customer
	BillingEmail *string `pulumi:"billingEmail"`
	// Unique handle of the account
	Handle string `pulumi:"handle"`
	// An optional for an external url associated with the account, e.g. https://prefect.io/
	Link *string `pulumi:"link"`
	// An optional physical location for the account, e.g. Washington, D.C.
	Location *string `pulumi:"location"`
	// Name of the account
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// Whether or not this account allows public workspaces
	AllowPublicWorkspaces pulumi.BoolPtrInput
	// Billing email to apply to the account's Stripe customer
	BillingEmail pulumi.StringPtrInput
	// Unique handle of the account
	Handle pulumi.StringInput
	// An optional for an external url associated with the account, e.g. https://prefect.io/
	Link pulumi.StringPtrInput
	// An optional physical location for the account, e.g. Washington, D.C.
	Location pulumi.StringPtrInput
	// Name of the account
	Name pulumi.StringPtrInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// Whether or not this account allows public workspaces
func (o AccountOutput) AllowPublicWorkspaces() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Account) pulumi.BoolPtrOutput { return v.AllowPublicWorkspaces }).(pulumi.BoolPtrOutput)
}

// Billing email to apply to the account's Stripe customer
func (o AccountOutput) BillingEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) pulumi.StringPtrOutput { return v.BillingEmail }).(pulumi.StringPtrOutput)
}

// Timestamp of when the resource was created (RFC3339)
func (o AccountOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Unique handle of the account
func (o AccountOutput) Handle() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Handle }).(pulumi.StringOutput)
}

// An optional for an external url associated with the account, e.g. https://prefect.io/
func (o AccountOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) pulumi.StringPtrOutput { return v.Link }).(pulumi.StringPtrOutput)
}

// An optional physical location for the account, e.g. Washington, D.C.
func (o AccountOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the account
func (o AccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of when the resource was updated (RFC3339)
func (o AccountOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
